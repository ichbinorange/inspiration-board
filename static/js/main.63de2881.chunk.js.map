{"version":3,"sources":["components/Card.js","components/NewCardForm.js","components/Board.js","components/Search.js","App.js","registerServiceWorker.js","index.js"],"names":["Card","props","className","text","emoji","getUnicode","onClick","deleteCardCallback","id","data-testid","EMOJI_LIST","NewCardForm","useState","formFields","setFormFields","onInputChange","event","newFormFields","target","name","value","getName","onSubmit","preventDefault","addCardCallback","onChange","placeholder","map","ej","i","type","Board","cardList","setCardList","errorMessage","setErrorMessage","useEffect","axios","get","url","board","boardName","card","then","response","apiCardList","data","length","catch","error","message","deleteCard","newCardList","filter","delete","cardComponents","post","updatedData","Search","loading","setLoading","items","setItems","setValue","boardList","label","disabled","currentTarget","chooseBoardCallback","item","App","setBoard","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.63de2881.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport emoji from 'emoji-dictionary';\n\nimport './Card.css';\n\nconst Card = (props) => {\n  return (\n    <div className=\"card\">\n      <div className=\"card__content\">\n        <div className=\"card__content-text\">{props.text}</div>\n        <div className=\"card__content-emoji\">{emoji.getUnicode(props.emoji || '')}</div>\n        <button\n          onClick={() => props.deleteCardCallback(props.id)}\n          className=\"card__delete\"\n          data-testid={props.id}>\n          Delete\n        </button>\n      </div>\n    </div>\n  )\n}\n\nCard.propTypes = {\n  text: PropTypes.string.isRequired,\n  emoji: PropTypes.string,\n  deleteCardCallback: PropTypes.func.isRequired,\n};\n\nexport default Card;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport emoji from 'emoji-dictionary';\nimport './NewCardForm.css';\n\nconst EMOJI_LIST = [\"\", \"heart_eyes\", \"beer\", \"clap\", \"sparkling_heart\", \"heart_eyes_cat\", \"dog\"]\n\nconst NewCardForm = (props) => {\n  const [formFields, setFormFields] = useState({\n    text: '',\n    emoji: '',\n  })\n\n  // event handlers\n  const onInputChange = (event) => {\n    const newFormFields = {\n      ...formFields,\n    }\n    newFormFields[event.target.name] = event.target.value;\n    newFormFields.emoji = emoji.getName(newFormFields.emoji)\n    setFormFields(newFormFields)\n  }\n\n  const onFormSubmit = (event) => {\n    event.preventDefault();\n    props.addCardCallback(formFields);\n\n    setFormFields({\n      text: '',\n      emoji: '',\n    })\n  }\n\n  return (\n    <form\n      className=\"new-card-form\"\n      onSubmit={onFormSubmit}\n    >\n      <h2 className=\"new-card-form__header\">Add a New Card</h2>\n      <div className=\"new-card-form__form\">\n        <label className=\"new-card-form__form-label\">Text:</label>\n        <textarea id=\"text\"\n                  name=\"text\"\n                  onChange={onInputChange}\n                  value={formFields.text}\n                  className=\"new-card-form__form-textarea\" \n                  placeholder=\"Hello there, please put some text in this text area\"\n                  ></textarea>\n        \n        <label className=\"new-card-form__form-label\">Emoji:</label>\n        <select className=\"new-card-form__form-select\"\n                name=\"emoji\"\n                onChange={onInputChange} \n                >\n          {\n            EMOJI_LIST.map((ej, i) => (\n              <option key={i}\n                      value={ej.emoji} \n                      >{emoji.getUnicode(ej)}</option>\n            ))\n          }\n        </select>\n\n        <input\n          type=\"submit\"\n          value=\"Add Card\"\n          className=\"new-card-form__form-button\"\n        />\n      </div>\n    </form>\n  )\n}\n\nNewCardForm.propTypes = {\n  addCardCallback: PropTypes.func.isRequired,\n};\n\nexport default NewCardForm;","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\n\nimport './Board.css';\nimport Card from './Card';\nimport NewCardForm from './NewCardForm';\n\nconst Board = (props) => {\n  const [cardList, setCardList] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect(() => {\n    axios.get(`${props.url}${props.board}/${props.boardName}/${props.card}`)\n      .then((response) => {\n        const apiCardList = response.data;\n        if (apiCardList.length !== 0) {\n          setCardList([...apiCardList]);\n        } else {\n          setCardList(apiCardList)\n        }\n      })\n      .catch((error) => {\n        // Still need to handle errors\n        setErrorMessage(error.message);\n      });\n  }, [props.boardName]);\n  \n  const addCard = (card) => {\n    axios.post(`${props.url}${props.board}/${props.boardName}/${props.card}`, card)\n    .then((response) => {\n      // What should we do when we know the post request worked?\n      const updatedData = [...cardList, response.data];\n      setCardList(updatedData);\n      setErrorMessage('');\n    })\n    .catch((error) => {\n      // What should we do when we know the post request failed?\n      setErrorMessage(error.message);\n    });\n  }\n\n  const deleteCard = (id) => {\n    const newCardList = cardList.filter((card) => {\n      return card.card.id !== id;\n    });\n\n    if (newCardList.length < cardList.length) {\n      axios.delete(`${props.url}${props.card}/${id}`)\n        .then((response) => {\n          setErrorMessage(`Card ${ id } deleted`);\n        })\n        .catch((error) => {\n          setErrorMessage(`Unable to delete student ${ id }`);\n        })\n      setCardList(newCardList);\n    }\n  }\n  \n  const cardComponents = cardList.map((card) => {\n    return (\n      <Card\n        key={card.card.id}\n        id={card.card.id}\n        text={card.card.text}\n        emoji={card.card.emoji}\n        deleteCardCallback={deleteCard}\n      />\n    )\n  })\n  return (\n    <div data-testid={props.boardName}>\n      <NewCardForm addCardCallback={addCard} /> \n      <div className=\"validation-errors-display\">\n        <h2 className=\"validation-errors-display__list\">\n          {errorMessage ? `${errorMessage}` : ''}\n        </h2>\n      </div>\n      <div className=\"board\">\n        {cardComponents}\n      </div>\n    </div>\n  )\n};\nBoard.propTypes = {\n  cards: PropTypes.arrayOf(PropTypes.shape(\n    { card: {\n        text: PropTypes.string.isRequired,\n        emoji: PropTypes.string,\n        id: PropTypes.number.isRequired,\n      }\n    },\n  )),\n};\n\nexport default Board;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport './Search.css';\n\nconst Search = (props) => {\n  const [loading, setLoading] = useState(true);\n  const [items, setItems] = useState([]);\n  const [value, setValue] = useState('');\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect(() => {\n    axios.get(`${props.url}`)\n      .then((response) => {\n        const boardList = response.data;\n        setItems(\n          boardList.map(({ board }) => ({ label: board.name, value: board.name }))\n        );\n        setLoading(false);\n      })\n      .catch((error) => {\n        // Still need to handle errors\n        setErrorMessage(error.message);\n      });\n  }, []);\n\n  // event handlers\n  const onInputChange = (event) => {\n    setValue(event.currentTarget.value)\n    props.chooseBoardCallback(event.currentTarget.value);\n  }\n\n  return (\n    <section>\n      <h2 className=\"search__header\">Choose a Board</h2>\n      <div className=\"search__form\">\n        <select disabled={loading}\n                value={value}\n                onChange={onInputChange}\n                className=\"search__form-select\">\n          {items.map(item => (\n            <option\n              key={item.value}\n              value={item.value}\n            >\n              {item.label}\n            </option>\n          ))}\n        </select>\n      </div>\n    </section>\n  )\n}\n\nSearch.propTypes = {\n  chooseBoardCallback: PropTypes.func.isRequired,\n};\n\nexport default Search;","import React, { useState } from 'react';\nimport './App.css';\nimport Board from './components/Board';\nimport Search from './components/Search';\n\nconst App = () => {\n  const [board, setBoard] = useState('{}')\n  const updateBoard = (item) => {\n    setBoard(item)\n  }\n\n  return (\n    <section>\n      <header className=\"header\">\n        <h1 className=\"header__h1\"><span className=\"header__text\">Inspiration Board</span></h1>\n        <h1 className=\"header__h1\"><span className=\"header__text\">You are now at {board}'s Board</span></h1>\n      </header>\n      <Search url=\"https://inspiration-board.herokuapp.com/boards\" \n              chooseBoardCallback={updateBoard} />\n      <Board\n        url=\"https://inspiration-board.herokuapp.com/\"\n        board=\"boards\" // for retrieving list of cards for a single board (not for delete a card)\n        card=\"cards\"   // for deleting a card\n        boardName={board}\n      />\n    </section>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}